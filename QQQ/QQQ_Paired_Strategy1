{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPp4ePiBL0Jb1L00SAmNKTx",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/fengfrankgthb/BUS-41204/blob/main/QQQ/QQQ_Model_Trial.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Disclaimer**:\n",
        "\n",
        "This is the initial lesson from #Dataquest on YouTube.\n",
        "Thanks to the author/instructor /github/dataquestio/\n",
        "\n",
        "**Project Overview**\n",
        "\n",
        "In this project, we'll predict the price of the QQQ stock market index.\n",
        "\n",
        "**Project Steps**\n",
        "\n",
        "* Download data using the yfinance package\n",
        "* Create an initial machine learning model and estimate accuracy\n",
        "* Build a backtesting engine to more accurately measure accuracy\n",
        "* Improve the accuracy of the model\n",
        "\n",
        "**Local Setup**\n",
        "\n",
        "**Installation**\n",
        "\n",
        "To follow this project, please install the following locally:\n",
        "\n",
        "* JupyerLab\n",
        "* Python 3.8+\n",
        "* Python packages\n",
        "  * pandas\n",
        "  * yfinance\n",
        "  * scikit-learn\n",
        "\n",
        "**Data**\n",
        "\n",
        "We'll download all of the data during the project, using the *yfinance* package."
      ],
      "metadata": {
        "id": "QvVQOxs5MDsy"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 1. Import Yahoo Finance Historical Data\n",
        "\n",
        "To download financial data, one of the easiest way is `yfinance` package API.\n",
        "\n",
        "    import yfinance as yf\n",
        "    Stock_Name = yf.Ticker(\"Stock_Ticker\")\n",
        "\n",
        "**Data Limits**\n",
        "\n",
        "It's crucial to understand that `yfinance` is an unofficial API wrapper, or a data scrapper. It works by scraping data from Yahoo Finance's website. Yahoo can change its website structure or implement stricter rate-limiting measures at any time without prior notice, potentially breaking `yfinance` functionality or leading to temporary blocks.\n",
        "\n",
        "Based on user experiences and some older information related to Yahoo's APIs (which might still offer some insight):\n",
        "\n",
        "**General Observations** and **Potential Limits**:\n",
        "\n",
        "* \"Too Many Requests\" Errors: Users frequently encounter \"Too Many Requests\" or HTTP 429 errors, indicating they've hit some form of rate limiting.\n",
        "* Varying Limits: The exact limits seem to be dynamic and not clearly defined. They might depend on factors like the frequency of requests, the volume of data being requested, and possibly even your IP address.\n",
        "* Intraday Data: Requesting high-frequency intraday data (e.g., 1-minute intervals) for a large number of tickers or extended periods seems more likely to trigger rate limits.\n",
        "* Batching Requests: Sending multiple ticker symbols in a single request (where the yfinance function allows) is generally more efficient and less likely to hit limits compared to making individual requests for each ticker.\n",
        "* User-Agent Headers: Modifying the User-Agent header in  requests can sometimes help avoid being identified and blocked as an automated script. However, this is not a guaranteed solution and might stop working at any time.\n",
        "* No Official Documentation: Because yfinance is unofficial, there's no dedicated documentation from Yahoo outlining specific rate limits.\n",
        "\n",
        "**Inferred Potential Limits** (Based on older Yahoo API information and user reports):\n",
        "\n",
        "* Per Minute: limits in the range of 60 to a few hundred requests per minute. However, these are likely outdated and might not directly apply to how Yahoo currently handles scraping or unofficial API usage.\n",
        "* Per Hour: limits in the range of 360 to several thousand requests per hour. Again, treat these with caution.\n",
        "* Per Day: limits were sometimes speculated to be in the range of a few thousand to tens of thousands of requests.\n",
        "(Personal, less than 10 request on Max QQQ (6500 days)\n",
        "\n",
        "**Important Considerations for Using yfinance**:\n",
        "\n",
        "* Be Respectful: Avoid making excessively frequent requests, especially in tight loops. Implement delays (e.g., using **time.sleep()**) between requests.\n",
        "* Error Handling: Implement robust error handling in your code to catch YFinance errors (including rate limit errors) and handle them gracefully (e.g., by pausing and retrying later with an exponential backoff strategy).\n",
        "* Caching: Cache the data you retrieve locally whenever possible to reduce the number of API calls needed.\n",
        "* Consider Alternatives: If you require reliable, high-volume, and officially supported financial data, consider exploring paid APIs from financial data providers.\n",
        "* Monitor for Changes: Be aware that yfinance's functionality and Yahoo's rate-limiting behavior can change without notice. Regularly check for updates to the yfinance library and be prepared to adapt your code.\n",
        "\n",
        "**In summary, there is no exact, officially stated data limit for the yfinance API in terms of requests per day or per hour. Users often experience rate limiting, but the specific thresholds are not public and can change. It's best to be conservative with your request frequency and implement strategies to mitigate the risk of being blocked.**\n",
        "\n",
        "Sample Code to cache the `yfinance` data in csv format in current directory:\n",
        "\n",
        "    import yfinance as yf\n",
        "    QQQ = yf.Ticker(\"QQQ\")\n",
        "    hist_data = QQQ.history(period=\"max\")\n",
        "\n",
        "    # Save the DataFrame to a CSV file to current directory\n",
        "    hist_data.to_csv(\"QQQ_historical_data.csv\")\n",
        "\n",
        "Sample Code to cache the `yfinance` data in Pickle format in current directory:\n",
        "\n",
        "    import yfinance as yf\n",
        "    QQQ = yf.Ticker(\"QQQ\")\n",
        "    hist_data = QQQ.history(period=\"max\")\n",
        "\n",
        "    # Save the DataFrame to a Pickle file to current directory\n",
        "    hist_data.to_pickle(\"QQQ_historical_data.pkl\")\n",
        "\n",
        "Sample Code to cache the `yfinance` data in csv format in my own G-Drive:\n",
        "\n",
        "    # Mount my G-Drive in Colab:\n",
        "    from google.colab import drive\n",
        "    drive.mount('/content/drive')\n",
        "\n",
        "    # The follow prompts to authorize Colab to access your Google Drive\n",
        "    import shutil\n",
        "    colab_file_path = \"QQQ.csv\"  # Assuming QQQ.csv is in root of Colab environment\n",
        "    drive_folder_path = \"/content/drive/MyDrive/My Data\"  # Adjust this to your desired Google Drive path\n",
        "\n",
        "    # Create the directory in Google Drive if it doesn't exist\n",
        "    import os\n",
        "    os.makedirs(drive_folder_path, exist_ok=True) # Adjust \"drive_folder_path\" to your desired folder path\n",
        "\n",
        "    drive_file_path = f\"{drive_folder_path}/QQQ.csv\"\n",
        "    shutil.copy(colab_file_path, drive_file_path)\n",
        "    print(f\"File 'QQQ.csv' copied to '{drive_file_path}' in your Google Drive.\")\n",
        "\n",
        "\n",
        "    "
      ],
      "metadata": {
        "id": "WediPgaVYd4-"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "2Dxvg-V-MgdO",
        "outputId": "2b669123-49c9-4538-cefc-baa607f6b151"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                 Open        High         Low       Close  \\\n",
              "Date                                                                        \n",
              "1999-03-10 00:00:00-05:00   43.335822   43.362311   42.620622   43.282845   \n",
              "1999-03-11 00:00:00-05:00   43.600699   43.852343   42.647099   43.494743   \n",
              "1999-03-12 00:00:00-05:00   43.335810   43.362299   42.090833   42.435188   \n",
              "1999-03-15 00:00:00-05:00   42.753068   43.706668   42.302757   43.653690   \n",
              "1999-03-16 00:00:00-05:00   43.839110   44.209955   43.362310   44.024532   \n",
              "...                               ...         ...         ...         ...   \n",
              "2025-04-28 00:00:00-04:00  473.029999  474.809998  466.029999  472.410004   \n",
              "2025-04-29 00:00:00-04:00  470.170013  476.420013  469.589996  475.529999   \n",
              "2025-04-30 00:00:00-04:00  467.130005  477.200012  462.429993  475.470001   \n",
              "2025-05-01 00:00:00-04:00  483.410004  487.179993  480.739990  481.679993   \n",
              "2025-05-02 00:00:00-04:00  486.540009  490.910004  484.829987  488.829987   \n",
              "\n",
              "                             Volume  Dividends  Stock Splits  Capital Gains  \n",
              "Date                                                                         \n",
              "1999-03-10 00:00:00-05:00   5232000        0.0           0.0            0.0  \n",
              "1999-03-11 00:00:00-05:00   9688600        0.0           0.0            0.0  \n",
              "1999-03-12 00:00:00-05:00   8743600        0.0           0.0            0.0  \n",
              "1999-03-15 00:00:00-05:00   6369000        0.0           0.0            0.0  \n",
              "1999-03-16 00:00:00-05:00   4905800        0.0           0.0            0.0  \n",
              "...                             ...        ...           ...            ...  \n",
              "2025-04-28 00:00:00-04:00  33550800        0.0           0.0            0.0  \n",
              "2025-04-29 00:00:00-04:00  30613100        0.0           0.0            0.0  \n",
              "2025-04-30 00:00:00-04:00  46810600        0.0           0.0            0.0  \n",
              "2025-05-01 00:00:00-04:00  43316500        0.0           0.0            0.0  \n",
              "2025-05-02 00:00:00-04:00  39155400        0.0           0.0            0.0  \n",
              "\n",
              "[6579 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dd907a37-db25-4710-950b-51b09921d011\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Volume</th>\n",
              "      <th>Dividends</th>\n",
              "      <th>Stock Splits</th>\n",
              "      <th>Capital Gains</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1999-03-10 00:00:00-05:00</th>\n",
              "      <td>43.335822</td>\n",
              "      <td>43.362311</td>\n",
              "      <td>42.620622</td>\n",
              "      <td>43.282845</td>\n",
              "      <td>5232000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1999-03-11 00:00:00-05:00</th>\n",
              "      <td>43.600699</td>\n",
              "      <td>43.852343</td>\n",
              "      <td>42.647099</td>\n",
              "      <td>43.494743</td>\n",
              "      <td>9688600</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1999-03-12 00:00:00-05:00</th>\n",
              "      <td>43.335810</td>\n",
              "      <td>43.362299</td>\n",
              "      <td>42.090833</td>\n",
              "      <td>42.435188</td>\n",
              "      <td>8743600</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1999-03-15 00:00:00-05:00</th>\n",
              "      <td>42.753068</td>\n",
              "      <td>43.706668</td>\n",
              "      <td>42.302757</td>\n",
              "      <td>43.653690</td>\n",
              "      <td>6369000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1999-03-16 00:00:00-05:00</th>\n",
              "      <td>43.839110</td>\n",
              "      <td>44.209955</td>\n",
              "      <td>43.362310</td>\n",
              "      <td>44.024532</td>\n",
              "      <td>4905800</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-04-28 00:00:00-04:00</th>\n",
              "      <td>473.029999</td>\n",
              "      <td>474.809998</td>\n",
              "      <td>466.029999</td>\n",
              "      <td>472.410004</td>\n",
              "      <td>33550800</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-04-29 00:00:00-04:00</th>\n",
              "      <td>470.170013</td>\n",
              "      <td>476.420013</td>\n",
              "      <td>469.589996</td>\n",
              "      <td>475.529999</td>\n",
              "      <td>30613100</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-04-30 00:00:00-04:00</th>\n",
              "      <td>467.130005</td>\n",
              "      <td>477.200012</td>\n",
              "      <td>462.429993</td>\n",
              "      <td>475.470001</td>\n",
              "      <td>46810600</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-05-01 00:00:00-04:00</th>\n",
              "      <td>483.410004</td>\n",
              "      <td>487.179993</td>\n",
              "      <td>480.739990</td>\n",
              "      <td>481.679993</td>\n",
              "      <td>43316500</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-05-02 00:00:00-04:00</th>\n",
              "      <td>486.540009</td>\n",
              "      <td>490.910004</td>\n",
              "      <td>484.829987</td>\n",
              "      <td>488.829987</td>\n",
              "      <td>39155400</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>6579 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dd907a37-db25-4710-950b-51b09921d011')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-dd907a37-db25-4710-950b-51b09921d011 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-dd907a37-db25-4710-950b-51b09921d011');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-18eb36d6-72ab-4eab-bca3-a4b10ee8a90f\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-18eb36d6-72ab-4eab-bca3-a4b10ee8a90f')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-18eb36d6-72ab-4eab-bca3-a4b10ee8a90f button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_a0ff88a3-22c3-43dd-b0e5-511caff6261b\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('QQQ')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_a0ff88a3-22c3-43dd-b0e5-511caff6261b button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('QQQ');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "QQQ",
              "summary": "{\n  \"name\": \"QQQ\",\n  \"rows\": 6579,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1999-03-10 00:00:00-05:00\",\n        \"max\": \"2025-05-02 00:00:00-04:00\",\n        \"num_unique_values\": 6579,\n        \"samples\": [\n          \"2001-08-09 00:00:00-04:00\",\n          \"2018-08-23 00:00:00-04:00\",\n          \"2004-10-29 00:00:00-04:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 126.36803180752834,\n        \"min\": 16.90202961116509,\n        \"max\": 538.9262828029723,\n        \"num_unique_values\": 6576,\n        \"samples\": [\n          34.26178569803889,\n          108.68019553302017,\n          31.358120723107564\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"High\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 127.27367565952191,\n        \"min\": 17.40213993125259,\n        \"max\": 540.0047320561414,\n        \"num_unique_values\": 6573,\n        \"samples\": [\n          34.54150990703806,\n          25.283709108651838,\n          29.6844930825193\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 125.36445777597153,\n        \"min\": 16.749457194536763,\n        \"max\": 535.6612335791547,\n        \"num_unique_values\": 6575,\n        \"samples\": [\n          33.88882791551461,\n          108.50140365751898,\n          31.09526313818444\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 126.38854435333774,\n        \"min\": 17.003746032714844,\n        \"max\": 538.7166748046875,\n        \"num_unique_values\": 6148,\n        \"samples\": [\n          309.0729064941406,\n          36.51759719848633,\n          64.37489318847656\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 48686037,\n        \"min\": 3302000,\n        \"max\": 616772300,\n        \"num_unique_values\": 6564,\n        \"samples\": [\n          79882600,\n          93068200,\n          36143900\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Dividends\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03879391010712754,\n        \"min\": 0.0,\n        \"max\": 0.835,\n        \"num_unique_values\": 80,\n        \"samples\": [\n          0.2,\n          0.0,\n          0.112\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Stock Splits\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.024657557381843775,\n        \"min\": 0.0,\n        \"max\": 2.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Capital Gains\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 1
        }
      ],
      "source": [
        "import yfinance as yf\n",
        "QQQ = yf.Ticker(\"QQQ\")\n",
        "QQQ = QQQ.history(period=\"max\")\n",
        "QQQ\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "QQQ.plot.line(y=\"Close\", use_index=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 439
        },
        "id": "u3636U8APDjv",
        "outputId": "c7c7d62c-9539-499d-873c-ffdfa9a830a2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Date'>"
            ]
          },
          "metadata": {},
          "execution_count": 3
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "QQQ"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "Xy1NOv0vPX9R",
        "outputId": "98c3c3b6-4968-4a76-9a8f-147e4a611b31"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                 Open        High         Low       Close  \\\n",
              "Date                                                                        \n",
              "1999-03-10 00:00:00-05:00   43.335807   43.362296   42.620607   43.282829   \n",
              "1999-03-11 00:00:00-05:00   43.600687   43.852332   42.647088   43.494732   \n",
              "1999-03-12 00:00:00-05:00   43.335818   43.362307   42.090840   42.435196   \n",
              "1999-03-15 00:00:00-05:00   42.753072   43.706672   42.302761   43.653694   \n",
              "1999-03-16 00:00:00-05:00   43.839095   44.209939   43.362295   44.024517   \n",
              "...                               ...         ...         ...         ...   \n",
              "2025-04-29 00:00:00-04:00  470.170013  476.420013  469.589996  475.529999   \n",
              "2025-04-30 00:00:00-04:00  467.130005  477.200012  462.429993  475.470001   \n",
              "2025-05-01 00:00:00-04:00  483.410004  487.179993  480.739990  481.679993   \n",
              "2025-05-02 00:00:00-04:00  486.540009  490.910004  484.829987  488.829987   \n",
              "2025-05-05 00:00:00-04:00  484.575012  489.019989  484.100006  485.929993   \n",
              "\n",
              "                             Volume  Dividends  Stock Splits  Capital Gains  \n",
              "Date                                                                         \n",
              "1999-03-10 00:00:00-05:00   5232000        0.0           0.0            0.0  \n",
              "1999-03-11 00:00:00-05:00   9688600        0.0           0.0            0.0  \n",
              "1999-03-12 00:00:00-05:00   8743600        0.0           0.0            0.0  \n",
              "1999-03-15 00:00:00-05:00   6369000        0.0           0.0            0.0  \n",
              "1999-03-16 00:00:00-05:00   4905800        0.0           0.0            0.0  \n",
              "...                             ...        ...           ...            ...  \n",
              "2025-04-29 00:00:00-04:00  30613100        0.0           0.0            0.0  \n",
              "2025-04-30 00:00:00-04:00  46810600        0.0           0.0            0.0  \n",
              "2025-05-01 00:00:00-04:00  43316500        0.0           0.0            0.0  \n",
              "2025-05-02 00:00:00-04:00  39155400        0.0           0.0            0.0  \n",
              "2025-05-05 00:00:00-04:00  26807818        0.0           0.0            0.0  \n",
              "\n",
              "[6580 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-aaa5efe5-2b30-48f5-9732-d95f4daf7922\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Volume</th>\n",
              "      <th>Dividends</th>\n",
              "      <th>Stock Splits</th>\n",
              "      <th>Capital Gains</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1999-03-10 00:00:00-05:00</th>\n",
              "      <td>43.335807</td>\n",
              "      <td>43.362296</td>\n",
              "      <td>42.620607</td>\n",
              "      <td>43.282829</td>\n",
              "      <td>5232000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1999-03-11 00:00:00-05:00</th>\n",
              "      <td>43.600687</td>\n",
              "      <td>43.852332</td>\n",
              "      <td>42.647088</td>\n",
              "      <td>43.494732</td>\n",
              "      <td>9688600</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1999-03-12 00:00:00-05:00</th>\n",
              "      <td>43.335818</td>\n",
              "      <td>43.362307</td>\n",
              "      <td>42.090840</td>\n",
              "      <td>42.435196</td>\n",
              "      <td>8743600</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1999-03-15 00:00:00-05:00</th>\n",
              "      <td>42.753072</td>\n",
              "      <td>43.706672</td>\n",
              "      <td>42.302761</td>\n",
              "      <td>43.653694</td>\n",
              "      <td>6369000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1999-03-16 00:00:00-05:00</th>\n",
              "      <td>43.839095</td>\n",
              "      <td>44.209939</td>\n",
              "      <td>43.362295</td>\n",
              "      <td>44.024517</td>\n",
              "      <td>4905800</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-04-29 00:00:00-04:00</th>\n",
              "      <td>470.170013</td>\n",
              "      <td>476.420013</td>\n",
              "      <td>469.589996</td>\n",
              "      <td>475.529999</td>\n",
              "      <td>30613100</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-04-30 00:00:00-04:00</th>\n",
              "      <td>467.130005</td>\n",
              "      <td>477.200012</td>\n",
              "      <td>462.429993</td>\n",
              "      <td>475.470001</td>\n",
              "      <td>46810600</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-05-01 00:00:00-04:00</th>\n",
              "      <td>483.410004</td>\n",
              "      <td>487.179993</td>\n",
              "      <td>480.739990</td>\n",
              "      <td>481.679993</td>\n",
              "      <td>43316500</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-05-02 00:00:00-04:00</th>\n",
              "      <td>486.540009</td>\n",
              "      <td>490.910004</td>\n",
              "      <td>484.829987</td>\n",
              "      <td>488.829987</td>\n",
              "      <td>39155400</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-05-05 00:00:00-04:00</th>\n",
              "      <td>484.575012</td>\n",
              "      <td>489.019989</td>\n",
              "      <td>484.100006</td>\n",
              "      <td>485.929993</td>\n",
              "      <td>26807818</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>6580 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-aaa5efe5-2b30-48f5-9732-d95f4daf7922')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-aaa5efe5-2b30-48f5-9732-d95f4daf7922 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-aaa5efe5-2b30-48f5-9732-d95f4daf7922');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-b6adc4f2-994d-43c5-8d86-5ba45f12ec07\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b6adc4f2-994d-43c5-8d86-5ba45f12ec07')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-b6adc4f2-994d-43c5-8d86-5ba45f12ec07 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_ddc06841-cdbd-4eeb-aeb7-158b680c7743\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('QQQ')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_ddc06841-cdbd-4eeb-aeb7-158b680c7743 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('QQQ');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "QQQ",
              "summary": "{\n  \"name\": \"QQQ\",\n  \"rows\": 6580,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1999-03-10 00:00:00-05:00\",\n        \"max\": \"2025-05-05 00:00:00-04:00\",\n        \"num_unique_values\": 6580,\n        \"samples\": [\n          \"2001-08-09 00:00:00-04:00\",\n          \"2018-08-23 00:00:00-04:00\",\n          \"2004-10-29 00:00:00-04:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 126.43635824400964,\n        \"min\": 16.90203529898171,\n        \"max\": 538.9262828029723,\n        \"num_unique_values\": 6577,\n        \"samples\": [\n          34.26178952599473,\n          108.68020310602206,\n          31.358137861437708\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"High\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 127.34286858698549,\n        \"min\": 17.40214578736472,\n        \"max\": 540.0047320561414,\n        \"num_unique_values\": 6574,\n        \"samples\": [\n          34.54151376624656,\n          109.60242118417771,\n          31.841473029838447\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 125.43375730050703,\n        \"min\": 16.749453462932014,\n        \"max\": 535.6612335791547,\n        \"num_unique_values\": 6576,\n        \"samples\": [\n          33.88882791551461,\n          109.12250411277434,\n          31.095270720023787\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 126.45744051261224,\n        \"min\": 17.003751754760742,\n        \"max\": 538.7166748046875,\n        \"num_unique_values\": 6149,\n        \"samples\": [\n          48.9095573425293,\n          466.0,\n          370.4609069824219\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 48684653,\n        \"min\": 3302000,\n        \"max\": 616772300,\n        \"num_unique_values\": 6565,\n        \"samples\": [\n          112152900,\n          74718100,\n          20310300\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Dividends\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03879098604947252,\n        \"min\": 0.0,\n        \"max\": 0.835,\n        \"num_unique_values\": 80,\n        \"samples\": [\n          0.2,\n          0.0,\n          0.112\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Stock Splits\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.024655683636078504,\n        \"min\": 0.0,\n        \"max\": 2.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Capital Gains\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "QQQ.index"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YY6UPq25QAHJ",
        "outputId": "8264c467-0b79-4092-ff82-7458ebe19a43"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DatetimeIndex(['1999-03-10 00:00:00-05:00', '1999-03-11 00:00:00-05:00',\n",
              "               '1999-03-12 00:00:00-05:00', '1999-03-15 00:00:00-05:00',\n",
              "               '1999-03-16 00:00:00-05:00', '1999-03-17 00:00:00-05:00',\n",
              "               '1999-03-18 00:00:00-05:00', '1999-03-19 00:00:00-05:00',\n",
              "               '1999-03-22 00:00:00-05:00', '1999-03-23 00:00:00-05:00',\n",
              "               ...\n",
              "               '2025-04-22 00:00:00-04:00', '2025-04-23 00:00:00-04:00',\n",
              "               '2025-04-24 00:00:00-04:00', '2025-04-25 00:00:00-04:00',\n",
              "               '2025-04-28 00:00:00-04:00', '2025-04-29 00:00:00-04:00',\n",
              "               '2025-04-30 00:00:00-04:00', '2025-05-01 00:00:00-04:00',\n",
              "               '2025-05-02 00:00:00-04:00', '2025-05-05 00:00:00-04:00'],\n",
              "              dtype='datetime64[ns, America/New_York]', name='Date', length=6580, freq=None)"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Get the column titles\n",
        "column_titles = QQQ.columns\n",
        "\n",
        "# Print the column titles\n",
        "print(column_titles)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7ValXcxBQsGi",
        "outputId": "fa22c47d-e4af-4444-a66b-72b88a36d307"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['Open', 'High', 'Low', 'Close', 'Volume', 'Dividends', 'Stock Splits',\n",
            "       'Capital Gains'],\n",
            "      dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "del QQQ[\"Dividends\"]\n",
        "del QQQ[\"Stock Splits\"]\n",
        "del QQQ[\"Capital Gains\"]"
      ],
      "metadata": {
        "id": "T-THKvE7RNP3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Get the column titles\n",
        "column_titles = QQQ.columns\n",
        "\n",
        "# Print the column titles\n",
        "print(column_titles)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oJVTt9cPRV_x",
        "outputId": "faf5f634-88ae-4c46-8414-5c7ec8fb24b8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['Open', 'High', 'Low', 'Close', 'Volume'], dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Creating New \"Tomorrow\" and \"Target\" Columns For Training"
      ],
      "metadata": {
        "id": "xtCKS3dVZFSG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "QQQ[\"Tomorrow\"] = QQQ[\"Close\"].shift(-1) # Define new column \"Tomorrow\" = \"Close\" shift(-1)\n",
        "QQQ"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "08t56Z3aScQV",
        "outputId": "d995e6e1-f5cc-4532-fe1c-5713ea9cbade"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                 Open        High         Low       Close  \\\n",
              "Date                                                                        \n",
              "1999-03-10 00:00:00-05:00   43.335807   43.362296   42.620607   43.282829   \n",
              "1999-03-11 00:00:00-05:00   43.600687   43.852332   42.647088   43.494732   \n",
              "1999-03-12 00:00:00-05:00   43.335818   43.362307   42.090840   42.435196   \n",
              "1999-03-15 00:00:00-05:00   42.753072   43.706672   42.302761   43.653694   \n",
              "1999-03-16 00:00:00-05:00   43.839095   44.209939   43.362295   44.024517   \n",
              "...                               ...         ...         ...         ...   \n",
              "2025-04-29 00:00:00-04:00  470.170013  476.420013  469.589996  475.529999   \n",
              "2025-04-30 00:00:00-04:00  467.130005  477.200012  462.429993  475.470001   \n",
              "2025-05-01 00:00:00-04:00  483.410004  487.179993  480.739990  481.679993   \n",
              "2025-05-02 00:00:00-04:00  486.540009  490.910004  484.829987  488.829987   \n",
              "2025-05-05 00:00:00-04:00  484.575012  489.019989  484.100006  485.929993   \n",
              "\n",
              "                             Volume    Tomorrow  \n",
              "Date                                             \n",
              "1999-03-10 00:00:00-05:00   5232000   43.494732  \n",
              "1999-03-11 00:00:00-05:00   9688600   42.435196  \n",
              "1999-03-12 00:00:00-05:00   8743600   43.653694  \n",
              "1999-03-15 00:00:00-05:00   6369000   44.024517  \n",
              "1999-03-16 00:00:00-05:00   4905800   43.706669  \n",
              "...                             ...         ...  \n",
              "2025-04-29 00:00:00-04:00  30613100  475.470001  \n",
              "2025-04-30 00:00:00-04:00  46810600  481.679993  \n",
              "2025-05-01 00:00:00-04:00  43316500  488.829987  \n",
              "2025-05-02 00:00:00-04:00  39155400  485.929993  \n",
              "2025-05-05 00:00:00-04:00  26807818         NaN  \n",
              "\n",
              "[6580 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c7bcde72-b6b6-4fb9-b769-cf8e2d3b33d0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Volume</th>\n",
              "      <th>Tomorrow</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1999-03-10 00:00:00-05:00</th>\n",
              "      <td>43.335807</td>\n",
              "      <td>43.362296</td>\n",
              "      <td>42.620607</td>\n",
              "      <td>43.282829</td>\n",
              "      <td>5232000</td>\n",
              "      <td>43.494732</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1999-03-11 00:00:00-05:00</th>\n",
              "      <td>43.600687</td>\n",
              "      <td>43.852332</td>\n",
              "      <td>42.647088</td>\n",
              "      <td>43.494732</td>\n",
              "      <td>9688600</td>\n",
              "      <td>42.435196</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1999-03-12 00:00:00-05:00</th>\n",
              "      <td>43.335818</td>\n",
              "      <td>43.362307</td>\n",
              "      <td>42.090840</td>\n",
              "      <td>42.435196</td>\n",
              "      <td>8743600</td>\n",
              "      <td>43.653694</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1999-03-15 00:00:00-05:00</th>\n",
              "      <td>42.753072</td>\n",
              "      <td>43.706672</td>\n",
              "      <td>42.302761</td>\n",
              "      <td>43.653694</td>\n",
              "      <td>6369000</td>\n",
              "      <td>44.024517</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1999-03-16 00:00:00-05:00</th>\n",
              "      <td>43.839095</td>\n",
              "      <td>44.209939</td>\n",
              "      <td>43.362295</td>\n",
              "      <td>44.024517</td>\n",
              "      <td>4905800</td>\n",
              "      <td>43.706669</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-04-29 00:00:00-04:00</th>\n",
              "      <td>470.170013</td>\n",
              "      <td>476.420013</td>\n",
              "      <td>469.589996</td>\n",
              "      <td>475.529999</td>\n",
              "      <td>30613100</td>\n",
              "      <td>475.470001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-04-30 00:00:00-04:00</th>\n",
              "      <td>467.130005</td>\n",
              "      <td>477.200012</td>\n",
              "      <td>462.429993</td>\n",
              "      <td>475.470001</td>\n",
              "      <td>46810600</td>\n",
              "      <td>481.679993</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-05-01 00:00:00-04:00</th>\n",
              "      <td>483.410004</td>\n",
              "      <td>487.179993</td>\n",
              "      <td>480.739990</td>\n",
              "      <td>481.679993</td>\n",
              "      <td>43316500</td>\n",
              "      <td>488.829987</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-05-02 00:00:00-04:00</th>\n",
              "      <td>486.540009</td>\n",
              "      <td>490.910004</td>\n",
              "      <td>484.829987</td>\n",
              "      <td>488.829987</td>\n",
              "      <td>39155400</td>\n",
              "      <td>485.929993</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-05-05 00:00:00-04:00</th>\n",
              "      <td>484.575012</td>\n",
              "      <td>489.019989</td>\n",
              "      <td>484.100006</td>\n",
              "      <td>485.929993</td>\n",
              "      <td>26807818</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>6580 rows × 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c7bcde72-b6b6-4fb9-b769-cf8e2d3b33d0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c7bcde72-b6b6-4fb9-b769-cf8e2d3b33d0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c7bcde72-b6b6-4fb9-b769-cf8e2d3b33d0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-8af59e02-7821-44da-9320-28d37162152a\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8af59e02-7821-44da-9320-28d37162152a')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-8af59e02-7821-44da-9320-28d37162152a button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_8a446103-a953-41b0-916a-6b98e420e84a\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('QQQ')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_8a446103-a953-41b0-916a-6b98e420e84a button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('QQQ');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "QQQ",
              "summary": "{\n  \"name\": \"QQQ\",\n  \"rows\": 6580,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1999-03-10 00:00:00-05:00\",\n        \"max\": \"2025-05-05 00:00:00-04:00\",\n        \"num_unique_values\": 6580,\n        \"samples\": [\n          \"2001-08-09 00:00:00-04:00\",\n          \"2018-08-23 00:00:00-04:00\",\n          \"2004-10-29 00:00:00-04:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 126.43635824400964,\n        \"min\": 16.90203529898171,\n        \"max\": 538.9262828029723,\n        \"num_unique_values\": 6577,\n        \"samples\": [\n          34.26178952599473,\n          108.68020310602206,\n          31.358137861437708\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"High\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 127.34286858698549,\n        \"min\": 17.40214578736472,\n        \"max\": 540.0047320561414,\n        \"num_unique_values\": 6574,\n        \"samples\": [\n          34.54151376624656,\n          109.60242118417771,\n          31.841473029838447\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 125.43375730050703,\n        \"min\": 16.749453462932014,\n        \"max\": 535.6612335791547,\n        \"num_unique_values\": 6576,\n        \"samples\": [\n          33.88882791551461,\n          109.12250411277434,\n          31.095270720023787\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 126.45744051261224,\n        \"min\": 17.003751754760742,\n        \"max\": 538.7166748046875,\n        \"num_unique_values\": 6149,\n        \"samples\": [\n          48.9095573425293,\n          466.0,\n          370.4609069824219\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 48684653,\n        \"min\": 3302000,\n        \"max\": 616772300,\n        \"num_unique_values\": 6565,\n        \"samples\": [\n          112152900,\n          74718100,\n          20310300\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Tomorrow\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 126.46307753040794,\n        \"min\": 17.003751754760742,\n        \"max\": 538.7166748046875,\n        \"num_unique_values\": 6148,\n        \"samples\": [\n          315.125244140625,\n          36.62208557128906,\n          64.46534729003906\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "QQQ[\"Target\"] = (QQQ[\"Tomorrow\"] > QQQ[\"Close\"]).astype(int) # Define new Column \"Target\" = (\"Tomorrow\" > \"Close\")\n",
        "QQQ"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "rYQYadwWSm8E",
        "outputId": "6e2fdbd3-ca41-4dd0-858c-ecfb7e6d2e9b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                 Open        High         Low       Close  \\\n",
              "Date                                                                        \n",
              "1999-03-10 00:00:00-05:00   43.335807   43.362296   42.620607   43.282829   \n",
              "1999-03-11 00:00:00-05:00   43.600687   43.852332   42.647088   43.494732   \n",
              "1999-03-12 00:00:00-05:00   43.335818   43.362307   42.090840   42.435196   \n",
              "1999-03-15 00:00:00-05:00   42.753072   43.706672   42.302761   43.653694   \n",
              "1999-03-16 00:00:00-05:00   43.839095   44.209939   43.362295   44.024517   \n",
              "...                               ...         ...         ...         ...   \n",
              "2025-04-29 00:00:00-04:00  470.170013  476.420013  469.589996  475.529999   \n",
              "2025-04-30 00:00:00-04:00  467.130005  477.200012  462.429993  475.470001   \n",
              "2025-05-01 00:00:00-04:00  483.410004  487.179993  480.739990  481.679993   \n",
              "2025-05-02 00:00:00-04:00  486.540009  490.910004  484.829987  488.829987   \n",
              "2025-05-05 00:00:00-04:00  484.575012  489.019989  484.100006  485.929993   \n",
              "\n",
              "                             Volume    Tomorrow  Target  \n",
              "Date                                                     \n",
              "1999-03-10 00:00:00-05:00   5232000   43.494732       1  \n",
              "1999-03-11 00:00:00-05:00   9688600   42.435196       0  \n",
              "1999-03-12 00:00:00-05:00   8743600   43.653694       1  \n",
              "1999-03-15 00:00:00-05:00   6369000   44.024517       1  \n",
              "1999-03-16 00:00:00-05:00   4905800   43.706669       0  \n",
              "...                             ...         ...     ...  \n",
              "2025-04-29 00:00:00-04:00  30613100  475.470001       0  \n",
              "2025-04-30 00:00:00-04:00  46810600  481.679993       1  \n",
              "2025-05-01 00:00:00-04:00  43316500  488.829987       1  \n",
              "2025-05-02 00:00:00-04:00  39155400  485.929993       0  \n",
              "2025-05-05 00:00:00-04:00  26807818         NaN       0  \n",
              "\n",
              "[6580 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8d86531b-757f-41f6-9eb1-a12bc7402b43\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Volume</th>\n",
              "      <th>Tomorrow</th>\n",
              "      <th>Target</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1999-03-10 00:00:00-05:00</th>\n",
              "      <td>43.335807</td>\n",
              "      <td>43.362296</td>\n",
              "      <td>42.620607</td>\n",
              "      <td>43.282829</td>\n",
              "      <td>5232000</td>\n",
              "      <td>43.494732</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1999-03-11 00:00:00-05:00</th>\n",
              "      <td>43.600687</td>\n",
              "      <td>43.852332</td>\n",
              "      <td>42.647088</td>\n",
              "      <td>43.494732</td>\n",
              "      <td>9688600</td>\n",
              "      <td>42.435196</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1999-03-12 00:00:00-05:00</th>\n",
              "      <td>43.335818</td>\n",
              "      <td>43.362307</td>\n",
              "      <td>42.090840</td>\n",
              "      <td>42.435196</td>\n",
              "      <td>8743600</td>\n",
              "      <td>43.653694</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1999-03-15 00:00:00-05:00</th>\n",
              "      <td>42.753072</td>\n",
              "      <td>43.706672</td>\n",
              "      <td>42.302761</td>\n",
              "      <td>43.653694</td>\n",
              "      <td>6369000</td>\n",
              "      <td>44.024517</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1999-03-16 00:00:00-05:00</th>\n",
              "      <td>43.839095</td>\n",
              "      <td>44.209939</td>\n",
              "      <td>43.362295</td>\n",
              "      <td>44.024517</td>\n",
              "      <td>4905800</td>\n",
              "      <td>43.706669</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-04-29 00:00:00-04:00</th>\n",
              "      <td>470.170013</td>\n",
              "      <td>476.420013</td>\n",
              "      <td>469.589996</td>\n",
              "      <td>475.529999</td>\n",
              "      <td>30613100</td>\n",
              "      <td>475.470001</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-04-30 00:00:00-04:00</th>\n",
              "      <td>467.130005</td>\n",
              "      <td>477.200012</td>\n",
              "      <td>462.429993</td>\n",
              "      <td>475.470001</td>\n",
              "      <td>46810600</td>\n",
              "      <td>481.679993</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-05-01 00:00:00-04:00</th>\n",
              "      <td>483.410004</td>\n",
              "      <td>487.179993</td>\n",
              "      <td>480.739990</td>\n",
              "      <td>481.679993</td>\n",
              "      <td>43316500</td>\n",
              "      <td>488.829987</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-05-02 00:00:00-04:00</th>\n",
              "      <td>486.540009</td>\n",
              "      <td>490.910004</td>\n",
              "      <td>484.829987</td>\n",
              "      <td>488.829987</td>\n",
              "      <td>39155400</td>\n",
              "      <td>485.929993</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-05-05 00:00:00-04:00</th>\n",
              "      <td>484.575012</td>\n",
              "      <td>489.019989</td>\n",
              "      <td>484.100006</td>\n",
              "      <td>485.929993</td>\n",
              "      <td>26807818</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>6580 rows × 7 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8d86531b-757f-41f6-9eb1-a12bc7402b43')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8d86531b-757f-41f6-9eb1-a12bc7402b43 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8d86531b-757f-41f6-9eb1-a12bc7402b43');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-3905b034-1127-495a-b81e-95107ec25235\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3905b034-1127-495a-b81e-95107ec25235')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-3905b034-1127-495a-b81e-95107ec25235 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_640d9d56-297d-4c0e-a675-3407a036e80d\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('QQQ')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_640d9d56-297d-4c0e-a675-3407a036e80d button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('QQQ');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "QQQ",
              "summary": "{\n  \"name\": \"QQQ\",\n  \"rows\": 6580,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1999-03-10 00:00:00-05:00\",\n        \"max\": \"2025-05-05 00:00:00-04:00\",\n        \"num_unique_values\": 6580,\n        \"samples\": [\n          \"2001-08-09 00:00:00-04:00\",\n          \"2018-08-23 00:00:00-04:00\",\n          \"2004-10-29 00:00:00-04:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 126.43635824400964,\n        \"min\": 16.90203529898171,\n        \"max\": 538.9262828029723,\n        \"num_unique_values\": 6577,\n        \"samples\": [\n          34.26178952599473,\n          108.68020310602206,\n          31.358137861437708\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"High\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 127.34286858698549,\n        \"min\": 17.40214578736472,\n        \"max\": 540.0047320561414,\n        \"num_unique_values\": 6574,\n        \"samples\": [\n          34.54151376624656,\n          109.60242118417771,\n          31.841473029838447\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 125.43375730050703,\n        \"min\": 16.749453462932014,\n        \"max\": 535.6612335791547,\n        \"num_unique_values\": 6576,\n        \"samples\": [\n          33.88882791551461,\n          109.12250411277434,\n          31.095270720023787\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 126.45744051261224,\n        \"min\": 17.003751754760742,\n        \"max\": 538.7166748046875,\n        \"num_unique_values\": 6149,\n        \"samples\": [\n          48.9095573425293,\n          466.0,\n          370.4609069824219\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 48684653,\n        \"min\": 3302000,\n        \"max\": 616772300,\n        \"num_unique_values\": 6565,\n        \"samples\": [\n          112152900,\n          74718100,\n          20310300\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Tomorrow\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 126.46307753040794,\n        \"min\": 17.003751754760742,\n        \"max\": 538.7166748046875,\n        \"num_unique_values\": 6148,\n        \"samples\": [\n          315.125244140625,\n          36.62208557128906,\n          64.46534729003906\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Traning Basic Model: Random Forest Classifier\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "Dis3qtK9Zh-A"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "model = RandomForestClassifier(n_estimators=100, min_samples_split=100, random_state=1) # This rf has 100 decision trees, and requires 100 sample to split a new node\n",
        "\n",
        "train = QQQ.iloc[:-200] # Ensure no cross validation in time series, excluding 200 rows in training.\n",
        "test = QQQ.iloc[-200:] # Last 200 data rows dedicated to testing\n",
        "\n",
        "predictors = [\"Close\", \"Volume\", \"High\", \"Low\"]\n",
        "model.fit(train[predictors], train[\"Target\"])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "SGACtMvJTOtq",
        "outputId": "1f4a2963-3d28-4fd8-abd2-c5ea65914d80"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier(min_samples_split=100, random_state=1)"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-2 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-2 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-2 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-2 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-2 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(min_samples_split=100, random_state=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomForestClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(min_samples_split=100, random_state=1)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import precision_score\n",
        "\n",
        "preds = model.predict(test[predictors])\n",
        "\n",
        "preds"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mtSb1sEkVAqX",
        "outputId": "0540f5b4-3d76-42e5-cdd0-0bb79e29ef3f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1,\n",
              "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1,\n",
              "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
              "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
              "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
              "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
              "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
              "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
              "       1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n",
              "       1, 1])"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "preds = pd.Series(preds, index=test.index) # Updates the preds array into a series with test index (the date).\n",
        "\n",
        "preds"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        },
        "id": "OmldjH7eW6kj",
        "outputId": "a039b3e1-3603-438d-8cc1-ce9140d7f481"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Date\n",
              "2024-07-18 00:00:00-04:00    1\n",
              "2024-07-19 00:00:00-04:00    1\n",
              "2024-07-22 00:00:00-04:00    1\n",
              "2024-07-23 00:00:00-04:00    1\n",
              "2024-07-24 00:00:00-04:00    1\n",
              "                            ..\n",
              "2025-04-29 00:00:00-04:00    1\n",
              "2025-04-30 00:00:00-04:00    1\n",
              "2025-05-01 00:00:00-04:00    1\n",
              "2025-05-02 00:00:00-04:00    1\n",
              "2025-05-05 00:00:00-04:00    1\n",
              "Length: 200, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2024-07-18 00:00:00-04:00</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-07-19 00:00:00-04:00</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-07-22 00:00:00-04:00</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-07-23 00:00:00-04:00</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-07-24 00:00:00-04:00</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-04-29 00:00:00-04:00</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-04-30 00:00:00-04:00</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-05-01 00:00:00-04:00</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-05-02 00:00:00-04:00</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-05-05 00:00:00-04:00</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>200 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "precision_score(test[\"Target\"], preds) # Compare \"Target\" and preds for TP / (TP + FP)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vsZbxMmIXPIt",
        "outputId": "4182f797-7270-4c18-d6a5-9a8662b9b49c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.544973544973545"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import accuracy_score, recall_score, f1_score\n",
        "\n",
        "accuracy = accuracy_score(test[\"Target\"], preds) # (TP + TN) / ALL\n",
        "print(f\"Accuracty: {accuracy}\")\n",
        "\n",
        "recall = recall_score(test[\"Target\"], preds) # TP / (TP + FN)\n",
        "print(f\"Recall: {recall}\")\n",
        "\n",
        "f1 = f1_score(test[\"Target\"], preds) # 2TP / (2TP + TN + FP) = 2*P*R / (P + R)\n",
        "print(f\"F1 Score: {f1}\")\n",
        "\n",
        "specificity = recall_score(test[\"Target\"], preds, pos_label=0) # TN / (TN + FP)\n",
        "print(f\"Specificity: {specificity}\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "th0gU2XUL0b8",
        "outputId": "e22b0c47-3a4b-43a4-ca52-ffbb302e186c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracty: 0.53\n",
            "Recall: 0.9279279279279279\n",
            "F1 Score: 0.6866666666666666\n",
            "Specificity: 0.033707865168539325\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Understand the result Basic RF Model**:\n",
        "\n",
        "**Precision**: 54%. Buying on the preds \"1\" makes profits 54 times vs loss 46 times, with 8% chance margin.\n",
        "\n",
        "**Recall**: 92%. Buying on the preds \"1\" misses only 8% of the buying opportunities.\n",
        "\n",
        "**Accuracy**: 53%. Buying on the preds \"1\" and Selling on the preds \"0\" together makes profits 53 times vs loss 47 times, with 6% chance margin.\n",
        "\n",
        "**F1**: 68%. Good balance between precision and recall sensitivity.\n",
        "\n",
        "**nPrecision**: 27%. Selling on the preds \"0\" makes profits 27 times vs loss 73 times, with -46% chance margin. Don't sell on prediction!\n"
      ],
      "metadata": {
        "id": "LwFma61ESf97"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate the confusion matrix\n",
        "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "cm = confusion_matrix(test[\"Target\"], preds)\n",
        "\n",
        "# Define class labels (optional)\n",
        "class_labels = ['Negative', 'Positive']\n",
        "\n",
        "# Create the ConfusionMatrixDisplay object\n",
        "disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=class_labels)\n",
        "\n",
        "# Plot the confusion matrix\n",
        "disp.plot(cmap=plt.cm.Blues)\n",
        "plt.title('Confusion Matrix')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "j23-hnahM1by",
        "outputId": "18ee4b4c-d120-4b40-ee89-f643bfe0a45a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "combined = pd.concat([test[\"Target\"], preds], axis=1)\n",
        "combined.plot()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 450
        },
        "id": "WSayWAwCXf9b",
        "outputId": "59a0e35c-97b9-42bb-c36f-a13d9942f3ec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Date'>"
            ]
          },
          "metadata": {},
          "execution_count": 43
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Backtest from 4th Year (2003)"
      ],
      "metadata": {
        "id": "UcJs9xQ5cni1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Define a function \"predict\" with 4 arguments: train, test, predictors, and model\n",
        "# Use model to fit the \"predictors\" to \"Target\" in \"train\" data\n",
        "# Then, use model to predict on \"predictors\" in test data, result into \"preds\" as an array.\n",
        "# Next, build \"preds\" into series indexing to the \"test\" data\n",
        "# Last, combine the series \"preds\" with \"target\" in \"test\" data into \"combined\" series\n",
        "# Returne \"combined\" series with date, prediction 1/0, and true target 1/0\n",
        "def predict(train, test, predictors, model):\n",
        "    model.fit(train[predictors], train[\"Target\"])\n",
        "    preds = model.predict(test[predictors])\n",
        "    preds = pd.Series(preds, index=test.index, name=\"Predictions\")\n",
        "    combined = pd.concat([test[\"Target\"], preds], axis=1)\n",
        "    return combined"
      ],
      "metadata": {
        "id": "nndMlPimZt9q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Define function \"backtest\" with 5 arguments: data, model, predictors, start, and step.\n",
        "# Create empty list \"all_predictions\"\n",
        "# Then, loop through the data starting from 1000th day (2003), with step of 250 days (1 year)\n",
        "# In each step, use all data upto i-th (excluding) as train data, and data from i-th to +250 as test data\n",
        "# Use above \"predict\" function to predict on \"test\" 250-data based on the \"train\" upto i-th data\n",
        "# Append prediction results in step to the \"all_prediction\" list\n",
        "# After all steps, use pandas to function \"concat()\" into a DataFrame\n",
        "def backtest(data, model, predictors, start=1000, step=250):\n",
        "    all_predictions = []\n",
        "\n",
        "    for i in range (start, data.shape[0], step):\n",
        "        train = data.iloc[0:i].copy()\n",
        "        test = data.iloc[i:(i+step)].copy()\n",
        "        predictions = predict(train, test, predictors, model)\n",
        "        all_predictions.append(predictions)\n",
        "    return pd.concat(all_predictions)"
      ],
      "metadata": {
        "id": "2NKYIFVRaftN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Run function \"backtest()\" and return result into \"predictions\" DataFrame\n",
        "predictions = backtest(QQQ, model, predictors)"
      ],
      "metadata": {
        "id": "JhxbBG8hbFqI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "predictions"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "nR8aktrJrjNT",
        "outputId": "8e29e819-47d9-4cac-f5e6-8f2f0e5cb460"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                           Target  Predictions\n",
              "Date                                          \n",
              "2003-03-04 00:00:00-05:00       1            0\n",
              "2003-03-05 00:00:00-05:00       0            0\n",
              "2003-03-06 00:00:00-05:00       1            0\n",
              "2003-03-07 00:00:00-05:00       0            0\n",
              "2003-03-10 00:00:00-05:00       0            1\n",
              "...                           ...          ...\n",
              "2025-04-29 00:00:00-04:00       0            1\n",
              "2025-04-30 00:00:00-04:00       1            1\n",
              "2025-05-01 00:00:00-04:00       1            1\n",
              "2025-05-02 00:00:00-04:00       0            1\n",
              "2025-05-05 00:00:00-04:00       0            1\n",
              "\n",
              "[5580 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-48ab01df-1bf5-4834-b761-dfcc91287c2a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Target</th>\n",
              "      <th>Predictions</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2003-03-04 00:00:00-05:00</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2003-03-05 00:00:00-05:00</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2003-03-06 00:00:00-05:00</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2003-03-07 00:00:00-05:00</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2003-03-10 00:00:00-05:00</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-04-29 00:00:00-04:00</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-04-30 00:00:00-04:00</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-05-01 00:00:00-04:00</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-05-02 00:00:00-04:00</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-05-05 00:00:00-04:00</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5580 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-48ab01df-1bf5-4834-b761-dfcc91287c2a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-48ab01df-1bf5-4834-b761-dfcc91287c2a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-48ab01df-1bf5-4834-b761-dfcc91287c2a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-18eeb3a6-e457-4cc3-b2ee-0dd09ef53675\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-18eeb3a6-e457-4cc3-b2ee-0dd09ef53675')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-18eeb3a6-e457-4cc3-b2ee-0dd09ef53675 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_314612fd-d113-48c7-87e7-be0a3ca94081\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('predictions')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_314612fd-d113-48c7-87e7-be0a3ca94081 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('predictions');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "predictions",
              "summary": "{\n  \"name\": \"predictions\",\n  \"rows\": 5580,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2003-03-04 00:00:00-05:00\",\n        \"max\": \"2025-05-05 00:00:00-04:00\",\n        \"num_unique_values\": 5580,\n        \"samples\": [\n          \"2013-08-16 00:00:00-04:00\",\n          \"2009-04-29 00:00:00-04:00\",\n          \"2006-01-17 00:00:00-05:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Predictions\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Count all the numbers of predictions as \"1\" and that of \"0\"\n",
        "predictions[\"Predictions\"].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        },
        "id": "uH9HgWvDbSZI",
        "outputId": "70b33abe-f9cf-4d31-b107-bce56d927659"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Predictions\n",
              "0    2853\n",
              "1    2727\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Predictions</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2853</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2727</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "precision = precision_score(predictions[\"Target\"], predictions[\"Predictions\"]) # TP / (TP + FP)\n",
        "print(f\"Precision: {precision}\")\n",
        "\n",
        "accuracy = accuracy_score(predictions[\"Target\"], predictions[\"Predictions\"]) # (TP + TN) / ALL\n",
        "print(f\"Accuracty: {accuracy}\")\n",
        "\n",
        "recall = recall_score(predictions[\"Target\"], predictions[\"Predictions\"]) # TP / (TP + FN)\n",
        "print(f\"Recall: {recall}\")\n",
        "\n",
        "f1 = f1_score(predictions[\"Target\"], predictions[\"Predictions\"]) # 2TP / (2TP + TN + FP) = 2*P*R / (P + R)\n",
        "print(f\"F1 Score: {f1}\")\n",
        "\n",
        "specificity = recall_score(predictions[\"Target\"], predictions[\"Predictions\"], pos_label=0) # TN / (TN + FP)\n",
        "print(f\"Specificity: {specificity}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-P6BWaTcbejp",
        "outputId": "ea14d788-b3c4-4764-ea3c-9b40db440396"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Precision: 0.5500550055005501\n",
            "Accuracty: 0.4971326164874552\n",
            "Recall: 0.4871711594673595\n",
            "F1 Score: 0.5167068549776094\n",
            "Specificity: 0.5093962415033987\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Understand the result BACKTEST**:\n",
        "\n",
        "**Precision**: 55%. Buying on the preds \"1\" makes profits 55 times vs loss 45 times, with 10% chance margin.\n",
        "\n",
        "**Recall**: 48%. Buying on the preds \"1\" misses only 52% of the buying opportunities.\n",
        "\n",
        "**Accuracy**: 49.7%. Buying on the preds \"1\" and Selling on the preds \"0\" together makes profits 49.7 times vs loss 50.3 times, with -0.6% chance margin.\n",
        "\n",
        "**F1**: 51.7%. Bad balance between precision and recall sensitivity.\n",
        "\n",
        "**nPrecision**: 44.6%. Selling on the preds \"0\" makes profits 44.6 times vs loss 55.4 times, with -10.8% chance margin. Don't sell on prediction!"
      ],
      "metadata": {
        "id": "R2DDlMYfzAsD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "predictions[\"Target\"].value_counts() / predictions.shape[0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        },
        "id": "IRwrj2BRbp0K",
        "outputId": "72c8a088-f5da-40f5-b81c-b1df19416b16"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Target\n",
              "1    0.551792\n",
              "0    0.448208\n",
              "Name: count, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Target</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.551792</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.448208</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n",
        "# import matplotlib.pyplot as plt\n",
        "\n",
        "cm_bktst = confusion_matrix(predictions[\"Target\"], predictions[\"Predictions\"])\n",
        "\n",
        "# Define class labels (optional)\n",
        "class_labels = ['Negative', 'Positive']\n",
        "\n",
        "# Create the ConfusionMatrixDisplay object\n",
        "disp = ConfusionMatrixDisplay(confusion_matrix=cm_bktst, display_labels=class_labels)\n",
        "\n",
        "# Plot the confusion matrix\n",
        "disp.plot(cmap=plt.cm.Blues)\n",
        "plt.title('Confusion Matrix')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "OGs_68Mjw0-t",
        "outputId": "9a5d9df4-bdaf-4b05-9dd7-0b3edf545d31"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# More Predictors: Close Ratios and Trends in 2D, 5D, 60D, 250D, 1000D"
      ],
      "metadata": {
        "id": "IUlDiuIkctg8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "horizons = [2,5,30,90,250]\n",
        "new_predictors =[]\n",
        "\n",
        "for horizon in horizons:\n",
        "    rolling_averages = QQQ.rolling(horizon).mean() # calculate the rolling averages in the horizons\n",
        "\n",
        "    #Create columns of ratios and trends\n",
        "    ratio_column = f\"Close_Ratio_{horizon}\" # Name the variable \"ration_column_2/5/60/250/1000\"\n",
        "    QQQ[ratio_column] = QQQ[\"Close\"] / rolling_averages[\"Close\"] # Define/calculate a column of ratio_column in QQQ dataframe\n",
        "\n",
        "    trend_column = f\"Trend_{horizon}\" # Name the variable \"trend_2/5/30/90/250\"\n",
        "    QQQ[trend_column] = QQQ.shift(1).rolling(horizon).sum()[\"Target\"] # Define/calculate a column of tend in QQQ dataframe\n",
        "\n",
        "    new_predictors += [ratio_column, trend_column] # Name ratios and trends as new_predictors"
      ],
      "metadata": {
        "id": "FDycEwGkcvvk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "QQQ"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 995
        },
        "id": "leOT2IoSePSx",
        "outputId": "1bd1fa9a-dc89-4a4b-ad8c-d9f6df731ca9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                 Open        High         Low       Close  \\\n",
              "Date                                                                        \n",
              "1999-03-10 00:00:00-05:00   43.335807   43.362296   42.620607   43.282829   \n",
              "1999-03-11 00:00:00-05:00   43.600687   43.852332   42.647088   43.494732   \n",
              "1999-03-12 00:00:00-05:00   43.335818   43.362307   42.090840   42.435196   \n",
              "1999-03-15 00:00:00-05:00   42.753072   43.706672   42.302761   43.653694   \n",
              "1999-03-16 00:00:00-05:00   43.839095   44.209939   43.362295   44.024517   \n",
              "...                               ...         ...         ...         ...   \n",
              "2025-04-29 00:00:00-04:00  470.170013  476.420013  469.589996  475.529999   \n",
              "2025-04-30 00:00:00-04:00  467.130005  477.200012  462.429993  475.470001   \n",
              "2025-05-01 00:00:00-04:00  483.410004  487.179993  480.739990  481.679993   \n",
              "2025-05-02 00:00:00-04:00  486.540009  490.910004  484.829987  488.829987   \n",
              "2025-05-05 00:00:00-04:00  484.575012  489.019989  484.100006  485.929993   \n",
              "\n",
              "                             Volume    Tomorrow  Target  Close_Ratio_2  \\\n",
              "Date                                                                     \n",
              "1999-03-10 00:00:00-05:00   5232000   43.494732       1            NaN   \n",
              "1999-03-11 00:00:00-05:00   9688600   42.435196       0       1.002442   \n",
              "1999-03-12 00:00:00-05:00   8743600   43.653694       1       0.987670   \n",
              "1999-03-15 00:00:00-05:00   6369000   44.024517       1       1.014154   \n",
              "1999-03-16 00:00:00-05:00   4905800   43.706669       0       1.004229   \n",
              "...                             ...         ...     ...            ...   \n",
              "2025-04-29 00:00:00-04:00  30613100  475.470001       0       1.003291   \n",
              "2025-04-30 00:00:00-04:00  46810600  481.679993       1       0.999937   \n",
              "2025-05-01 00:00:00-04:00  43316500  488.829987       1       1.006488   \n",
              "2025-05-02 00:00:00-04:00  39155400  485.929993       0       1.007367   \n",
              "2025-05-05 00:00:00-04:00  26807818         NaN       0       0.997025   \n",
              "\n",
              "                           Trend_2  Close_Ratio_5  Trend_5  Close_Ratio_30  \\\n",
              "Date                                                                         \n",
              "1999-03-10 00:00:00-05:00      NaN            NaN      NaN             NaN   \n",
              "1999-03-11 00:00:00-05:00      NaN            NaN      NaN             NaN   \n",
              "1999-03-12 00:00:00-05:00      1.0            NaN      NaN             NaN   \n",
              "1999-03-15 00:00:00-05:00      1.0            NaN      NaN             NaN   \n",
              "1999-03-16 00:00:00-05:00      2.0       1.014900      NaN             NaN   \n",
              "...                            ...            ...      ...             ...   \n",
              "2025-04-29 00:00:00-04:00      1.0       1.015044      4.0        1.029812   \n",
              "2025-04-30 00:00:00-04:00      1.0       1.005937      3.0        1.029560   \n",
              "2025-05-01 00:00:00-04:00      1.0       1.012933      3.0        1.042894   \n",
              "2025-05-02 00:00:00-04:00      2.0       1.020982      3.0        1.057589   \n",
              "2025-05-05 00:00:00-04:00      1.0       1.009226      3.0        1.050875   \n",
              "\n",
              "                           Trend_30  Close_Ratio_90  Trend_90  \\\n",
              "Date                                                            \n",
              "1999-03-10 00:00:00-05:00       NaN             NaN       NaN   \n",
              "1999-03-11 00:00:00-05:00       NaN             NaN       NaN   \n",
              "1999-03-12 00:00:00-05:00       NaN             NaN       NaN   \n",
              "1999-03-15 00:00:00-05:00       NaN             NaN       NaN   \n",
              "1999-03-16 00:00:00-05:00       NaN             NaN       NaN   \n",
              "...                             ...             ...       ...   \n",
              "2025-04-29 00:00:00-04:00      16.0        0.957422      45.0   \n",
              "2025-04-30 00:00:00-04:00      16.0        0.958560      45.0   \n",
              "2025-05-01 00:00:00-04:00      16.0        0.971802      46.0   \n",
              "2025-05-02 00:00:00-04:00      17.0        0.986752      47.0   \n",
              "2025-05-05 00:00:00-04:00      16.0        0.981584      46.0   \n",
              "\n",
              "                           Close_Ratio_250  Trend_250  \n",
              "Date                                                   \n",
              "1999-03-10 00:00:00-05:00              NaN        NaN  \n",
              "1999-03-11 00:00:00-05:00              NaN        NaN  \n",
              "1999-03-12 00:00:00-05:00              NaN        NaN  \n",
              "1999-03-15 00:00:00-05:00              NaN        NaN  \n",
              "1999-03-16 00:00:00-05:00              NaN        NaN  \n",
              "...                                    ...        ...  \n",
              "2025-04-29 00:00:00-04:00         0.982065      145.0  \n",
              "2025-04-30 00:00:00-04:00         0.981508      145.0  \n",
              "2025-05-01 00:00:00-04:00         0.993812      146.0  \n",
              "2025-05-02 00:00:00-04:00         1.008028      146.0  \n",
              "2025-05-05 00:00:00-04:00         1.001609      145.0  \n",
              "\n",
              "[6580 rows x 17 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4568028a-90c8-4c29-a197-748e38c64a75\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Volume</th>\n",
              "      <th>Tomorrow</th>\n",
              "      <th>Target</th>\n",
              "      <th>Close_Ratio_2</th>\n",
              "      <th>Trend_2</th>\n",
              "      <th>Close_Ratio_5</th>\n",
              "      <th>Trend_5</th>\n",
              "      <th>Close_Ratio_30</th>\n",
              "      <th>Trend_30</th>\n",
              "      <th>Close_Ratio_90</th>\n",
              "      <th>Trend_90</th>\n",
              "      <th>Close_Ratio_250</th>\n",
              "      <th>Trend_250</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1999-03-10 00:00:00-05:00</th>\n",
              "      <td>43.335807</td>\n",
              "      <td>43.362296</td>\n",
              "      <td>42.620607</td>\n",
              "      <td>43.282829</td>\n",
              "      <td>5232000</td>\n",
              "      <td>43.494732</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1999-03-11 00:00:00-05:00</th>\n",
              "      <td>43.600687</td>\n",
              "      <td>43.852332</td>\n",
              "      <td>42.647088</td>\n",
              "      <td>43.494732</td>\n",
              "      <td>9688600</td>\n",
              "      <td>42.435196</td>\n",
              "      <td>0</td>\n",
              "      <td>1.002442</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1999-03-12 00:00:00-05:00</th>\n",
              "      <td>43.335818</td>\n",
              "      <td>43.362307</td>\n",
              "      <td>42.090840</td>\n",
              "      <td>42.435196</td>\n",
              "      <td>8743600</td>\n",
              "      <td>43.653694</td>\n",
              "      <td>1</td>\n",
              "      <td>0.987670</td>\n",
              "      <td>1.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1999-03-15 00:00:00-05:00</th>\n",
              "      <td>42.753072</td>\n",
              "      <td>43.706672</td>\n",
              "      <td>42.302761</td>\n",
              "      <td>43.653694</td>\n",
              "      <td>6369000</td>\n",
              "      <td>44.024517</td>\n",
              "      <td>1</td>\n",
              "      <td>1.014154</td>\n",
              "      <td>1.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1999-03-16 00:00:00-05:00</th>\n",
              "      <td>43.839095</td>\n",
              "      <td>44.209939</td>\n",
              "      <td>43.362295</td>\n",
              "      <td>44.024517</td>\n",
              "      <td>4905800</td>\n",
              "      <td>43.706669</td>\n",
              "      <td>0</td>\n",
              "      <td>1.004229</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.014900</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-04-29 00:00:00-04:00</th>\n",
              "      <td>470.170013</td>\n",
              "      <td>476.420013</td>\n",
              "      <td>469.589996</td>\n",
              "      <td>475.529999</td>\n",
              "      <td>30613100</td>\n",
              "      <td>475.470001</td>\n",
              "      <td>0</td>\n",
              "      <td>1.003291</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.015044</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.029812</td>\n",
              "      <td>16.0</td>\n",
              "      <td>0.957422</td>\n",
              "      <td>45.0</td>\n",
              "      <td>0.982065</td>\n",
              "      <td>145.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-04-30 00:00:00-04:00</th>\n",
              "      <td>467.130005</td>\n",
              "      <td>477.200012</td>\n",
              "      <td>462.429993</td>\n",
              "      <td>475.470001</td>\n",
              "      <td>46810600</td>\n",
              "      <td>481.679993</td>\n",
              "      <td>1</td>\n",
              "      <td>0.999937</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.005937</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.029560</td>\n",
              "      <td>16.0</td>\n",
              "      <td>0.958560</td>\n",
              "      <td>45.0</td>\n",
              "      <td>0.981508</td>\n",
              "      <td>145.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-05-01 00:00:00-04:00</th>\n",
              "      <td>483.410004</td>\n",
              "      <td>487.179993</td>\n",
              "      <td>480.739990</td>\n",
              "      <td>481.679993</td>\n",
              "      <td>43316500</td>\n",
              "      <td>488.829987</td>\n",
              "      <td>1</td>\n",
              "      <td>1.006488</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.012933</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.042894</td>\n",
              "      <td>16.0</td>\n",
              "      <td>0.971802</td>\n",
              "      <td>46.0</td>\n",
              "      <td>0.993812</td>\n",
              "      <td>146.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-05-02 00:00:00-04:00</th>\n",
              "      <td>486.540009</td>\n",
              "      <td>490.910004</td>\n",
              "      <td>484.829987</td>\n",
              "      <td>488.829987</td>\n",
              "      <td>39155400</td>\n",
              "      <td>485.929993</td>\n",
              "      <td>0</td>\n",
              "      <td>1.007367</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.020982</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.057589</td>\n",
              "      <td>17.0</td>\n",
              "      <td>0.986752</td>\n",
              "      <td>47.0</td>\n",
              "      <td>1.008028</td>\n",
              "      <td>146.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-05-05 00:00:00-04:00</th>\n",
              "      <td>484.575012</td>\n",
              "      <td>489.019989</td>\n",
              "      <td>484.100006</td>\n",
              "      <td>485.929993</td>\n",
              "      <td>26807818</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0.997025</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.009226</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.050875</td>\n",
              "      <td>16.0</td>\n",
              "      <td>0.981584</td>\n",
              "      <td>46.0</td>\n",
              "      <td>1.001609</td>\n",
              "      <td>145.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>6580 rows × 17 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4568028a-90c8-4c29-a197-748e38c64a75')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4568028a-90c8-4c29-a197-748e38c64a75 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4568028a-90c8-4c29-a197-748e38c64a75');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-03ee7432-1285-4dae-9e75-9a6993fae28f\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-03ee7432-1285-4dae-9e75-9a6993fae28f')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-03ee7432-1285-4dae-9e75-9a6993fae28f button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_60c9d6fb-2e09-4d85-bb78-3c4fdc0789dd\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('QQQ')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_60c9d6fb-2e09-4d85-bb78-3c4fdc0789dd button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('QQQ');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "QQQ",
              "summary": "{\n  \"name\": \"QQQ\",\n  \"rows\": 6580,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1999-03-10 00:00:00-05:00\",\n        \"max\": \"2025-05-05 00:00:00-04:00\",\n        \"num_unique_values\": 6580,\n        \"samples\": [\n          \"2001-08-09 00:00:00-04:00\",\n          \"2018-08-23 00:00:00-04:00\",\n          \"2004-10-29 00:00:00-04:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 126.43635824400964,\n        \"min\": 16.90203529898171,\n        \"max\": 538.9262828029723,\n        \"num_unique_values\": 6577,\n        \"samples\": [\n          34.26178952599473,\n          108.68020310602206,\n          31.358137861437708\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"High\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 127.34286858698549,\n        \"min\": 17.40214578736472,\n        \"max\": 540.0047320561414,\n        \"num_unique_values\": 6574,\n        \"samples\": [\n          34.54151376624656,\n          109.60242118417771,\n          31.841473029838447\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 125.43375730050703,\n        \"min\": 16.749453462932014,\n        \"max\": 535.6612335791547,\n        \"num_unique_values\": 6576,\n        \"samples\": [\n          33.88882791551461,\n          109.12250411277434,\n          31.095270720023787\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 126.45744051261224,\n        \"min\": 17.003751754760742,\n        \"max\": 538.7166748046875,\n        \"num_unique_values\": 6149,\n        \"samples\": [\n          48.9095573425293,\n          466.0,\n          370.4609069824219\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 48684653,\n        \"min\": 3302000,\n        \"max\": 616772300,\n        \"num_unique_values\": 6565,\n        \"samples\": [\n          112152900,\n          74718100,\n          20310300\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Tomorrow\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 126.46307753040794,\n        \"min\": 17.003751754760742,\n        \"max\": 538.7166748046875,\n        \"num_unique_values\": 6148,\n        \"samples\": [\n          315.125244140625,\n          36.62208557128906,\n          64.46534729003906\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close_Ratio_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.008578469595683456,\n        \"min\": 0.9362902717714154,\n        \"max\": 1.077670020934837,\n        \"num_unique_values\": 6538,\n        \"samples\": [\n          1.0015285749301783,\n          1.0161489827640453\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Trend_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6997455502915976,\n        \"min\": 0.0,\n        \"max\": 2.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1.0,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close_Ratio_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.01768265628545229,\n        \"min\": 0.8769772209028064,\n        \"max\": 1.1070365438822085,\n        \"num_unique_values\": 6576,\n        \"samples\": [\n          0.9690210806016707,\n          1.015980221177904\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Trend_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.104527461588682,\n        \"min\": 0.0,\n        \"max\": 5.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          3.0,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close_Ratio_30\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.046352822192285655,\n        \"min\": 0.7528388075521548,\n        \"max\": 1.1755755688573533,\n        \"num_unique_values\": 6551,\n        \"samples\": [\n          1.0469575342391622,\n          0.9255101307947607\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Trend_30\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.870332908676903,\n        \"min\": 8.0,\n        \"max\": 24.0,\n        \"num_unique_values\": 17,\n        \"samples\": [\n          16.0,\n          17.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close_Ratio_90\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.08300658269019488,\n        \"min\": 0.6046120081308958,\n        \"max\": 1.356884647436278,\n        \"num_unique_values\": 6491,\n        \"samples\": [\n          1.0527539860018085,\n          1.0068218994134295\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Trend_90\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.5702111502913505,\n        \"min\": 32.0,\n        \"max\": 63.0,\n        \"num_unique_values\": 32,\n        \"samples\": [\n          32.0,\n          43.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close_Ratio_250\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.14642704459663744,\n        \"min\": 0.4405935688132001,\n        \"max\": 1.6872483347105036,\n        \"num_unique_values\": 6331,\n        \"samples\": [\n          1.1192905212924444,\n          1.140659719383133\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Trend_250\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.012556339052491,\n        \"min\": 109.0,\n        \"max\": 161.0,\n        \"num_unique_values\": 53,\n        \"samples\": [\n          126.0,\n          152.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "------Runtime stopped here 2025.05.04 at 22:48------"
      ],
      "metadata": {
        "id": "QwgA6XUPH4GR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "QQQ = QQQ.dropna() # drop the rows with \"NaN\" values because it can contaminate the model training\n",
        "QQQ"
      ],
      "metadata": {
        "id": "KtoBBSKRC8Bd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 995
        },
        "outputId": "172f5eb1-932a-467f-9d46-febb8a197480"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                 Open        High         Low       Close  \\\n",
              "Date                                                                        \n",
              "2000-03-06 00:00:00-05:00   94.724253   95.969231   93.452787   94.883186   \n",
              "2000-03-07 00:00:00-05:00   96.472522   96.525500   92.181323   93.452789   \n",
              "2000-03-08 00:00:00-05:00   94.088527   94.936171   90.088705   94.300438   \n",
              "2000-03-09 00:00:00-05:00   94.273940   97.902918   92.472696   97.479095   \n",
              "2000-03-10 00:00:00-05:00   97.373142   98.697586   96.214253   97.055275   \n",
              "...                               ...         ...         ...         ...   \n",
              "2025-04-28 00:00:00-04:00  473.029999  474.809998  466.029999  472.410004   \n",
              "2025-04-29 00:00:00-04:00  470.170013  476.420013  469.589996  475.529999   \n",
              "2025-04-30 00:00:00-04:00  467.130005  477.200012  462.429993  475.470001   \n",
              "2025-05-01 00:00:00-04:00  483.410004  487.179993  480.739990  481.679993   \n",
              "2025-05-02 00:00:00-04:00  486.540009  490.910004  484.829987  488.829987   \n",
              "\n",
              "                             Volume    Tomorrow  Target  Close_Ratio_2  \\\n",
              "Date                                                                     \n",
              "2000-03-06 00:00:00-05:00  23268400   93.452789       0       1.003924   \n",
              "2000-03-07 00:00:00-05:00  39471000   94.300438       1       0.992405   \n",
              "2000-03-08 00:00:00-05:00  43512600   97.479095       1       1.004515   \n",
              "2000-03-09 00:00:00-05:00  30101400   97.055275       0       1.016575   \n",
              "2000-03-10 00:00:00-05:00  29750600   94.512375       0       0.997821   \n",
              "...                             ...         ...     ...            ...   \n",
              "2025-04-28 00:00:00-04:00  33550800  475.529999       1       0.999841   \n",
              "2025-04-29 00:00:00-04:00  30613100  475.470001       0       1.003291   \n",
              "2025-04-30 00:00:00-04:00  46810600  481.679993       1       0.999937   \n",
              "2025-05-01 00:00:00-04:00  43316500  488.829987       1       1.006488   \n",
              "2025-05-02 00:00:00-04:00  39155400  485.929993       0       1.007367   \n",
              "\n",
              "                           Trend_2  Close_Ratio_5  Trend_5  Close_Ratio_30  \\\n",
              "Date                                                                         \n",
              "2000-03-06 00:00:00-05:00      2.0       1.031667      4.0        1.126188   \n",
              "2000-03-07 00:00:00-05:00      1.0       1.009601      3.0        1.102325   \n",
              "2000-03-08 00:00:00-05:00      1.0       1.012039      3.0        1.105599   \n",
              "2000-03-09 00:00:00-05:00      2.0       1.027703      4.0        1.133200   \n",
              "2000-03-10 00:00:00-05:00      1.0       1.016987      3.0        1.119471   \n",
              "...                            ...            ...      ...             ...   \n",
              "2025-04-28 00:00:00-04:00      1.0       1.021931      4.0        1.022574   \n",
              "2025-04-29 00:00:00-04:00      1.0       1.015044      4.0        1.029812   \n",
              "2025-04-30 00:00:00-04:00      1.0       1.005937      3.0        1.029560   \n",
              "2025-05-01 00:00:00-04:00      1.0       1.012933      3.0        1.042894   \n",
              "2025-05-02 00:00:00-04:00      2.0       1.020982      3.0        1.057589   \n",
              "\n",
              "                           Trend_30  Close_Ratio_90  Trend_90  \\\n",
              "Date                                                            \n",
              "2000-03-06 00:00:00-05:00      19.0        1.291682      57.0   \n",
              "2000-03-07 00:00:00-05:00      19.0        1.264292      57.0   \n",
              "2000-03-08 00:00:00-05:00      19.0        1.268050      57.0   \n",
              "2000-03-09 00:00:00-05:00      20.0        1.302668      57.0   \n",
              "2000-03-10 00:00:00-05:00      19.0        1.289039      57.0   \n",
              "...                             ...             ...       ...   \n",
              "2025-04-28 00:00:00-04:00      16.0        0.949845      45.0   \n",
              "2025-04-29 00:00:00-04:00      16.0        0.957422      45.0   \n",
              "2025-04-30 00:00:00-04:00      16.0        0.958560      45.0   \n",
              "2025-05-01 00:00:00-04:00      16.0        0.971802      46.0   \n",
              "2025-05-02 00:00:00-04:00      17.0        0.986752      47.0   \n",
              "\n",
              "                           Close_Ratio_250  Trend_250  \n",
              "Date                                                   \n",
              "2000-03-06 00:00:00-05:00         1.660207      143.0  \n",
              "2000-03-07 00:00:00-05:00         1.629481      142.0  \n",
              "2000-03-08 00:00:00-05:00         1.638335      143.0  \n",
              "2000-03-09 00:00:00-05:00         1.687248      143.0  \n",
              "2000-03-10 00:00:00-05:00         1.673767      142.0  \n",
              "...                                    ...        ...  \n",
              "2025-04-28 00:00:00-04:00         0.975988      145.0  \n",
              "2025-04-29 00:00:00-04:00         0.982065      145.0  \n",
              "2025-04-30 00:00:00-04:00         0.981508      145.0  \n",
              "2025-05-01 00:00:00-04:00         0.993812      146.0  \n",
              "2025-05-02 00:00:00-04:00         1.008028      146.0  \n",
              "\n",
              "[6329 rows x 17 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2046b300-15e6-4043-b8d3-3930caf9ee20\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Volume</th>\n",
              "      <th>Tomorrow</th>\n",
              "      <th>Target</th>\n",
              "      <th>Close_Ratio_2</th>\n",
              "      <th>Trend_2</th>\n",
              "      <th>Close_Ratio_5</th>\n",
              "      <th>Trend_5</th>\n",
              "      <th>Close_Ratio_30</th>\n",
              "      <th>Trend_30</th>\n",
              "      <th>Close_Ratio_90</th>\n",
              "      <th>Trend_90</th>\n",
              "      <th>Close_Ratio_250</th>\n",
              "      <th>Trend_250</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2000-03-06 00:00:00-05:00</th>\n",
              "      <td>94.724253</td>\n",
              "      <td>95.969231</td>\n",
              "      <td>93.452787</td>\n",
              "      <td>94.883186</td>\n",
              "      <td>23268400</td>\n",
              "      <td>93.452789</td>\n",
              "      <td>0</td>\n",
              "      <td>1.003924</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.031667</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.126188</td>\n",
              "      <td>19.0</td>\n",
              "      <td>1.291682</td>\n",
              "      <td>57.0</td>\n",
              "      <td>1.660207</td>\n",
              "      <td>143.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2000-03-07 00:00:00-05:00</th>\n",
              "      <td>96.472522</td>\n",
              "      <td>96.525500</td>\n",
              "      <td>92.181323</td>\n",
              "      <td>93.452789</td>\n",
              "      <td>39471000</td>\n",
              "      <td>94.300438</td>\n",
              "      <td>1</td>\n",
              "      <td>0.992405</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.009601</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.102325</td>\n",
              "      <td>19.0</td>\n",
              "      <td>1.264292</td>\n",
              "      <td>57.0</td>\n",
              "      <td>1.629481</td>\n",
              "      <td>142.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2000-03-08 00:00:00-05:00</th>\n",
              "      <td>94.088527</td>\n",
              "      <td>94.936171</td>\n",
              "      <td>90.088705</td>\n",
              "      <td>94.300438</td>\n",
              "      <td>43512600</td>\n",
              "      <td>97.479095</td>\n",
              "      <td>1</td>\n",
              "      <td>1.004515</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.012039</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.105599</td>\n",
              "      <td>19.0</td>\n",
              "      <td>1.268050</td>\n",
              "      <td>57.0</td>\n",
              "      <td>1.638335</td>\n",
              "      <td>143.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2000-03-09 00:00:00-05:00</th>\n",
              "      <td>94.273940</td>\n",
              "      <td>97.902918</td>\n",
              "      <td>92.472696</td>\n",
              "      <td>97.479095</td>\n",
              "      <td>30101400</td>\n",
              "      <td>97.055275</td>\n",
              "      <td>0</td>\n",
              "      <td>1.016575</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.027703</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.133200</td>\n",
              "      <td>20.0</td>\n",
              "      <td>1.302668</td>\n",
              "      <td>57.0</td>\n",
              "      <td>1.687248</td>\n",
              "      <td>143.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2000-03-10 00:00:00-05:00</th>\n",
              "      <td>97.373142</td>\n",
              "      <td>98.697586</td>\n",
              "      <td>96.214253</td>\n",
              "      <td>97.055275</td>\n",
              "      <td>29750600</td>\n",
              "      <td>94.512375</td>\n",
              "      <td>0</td>\n",
              "      <td>0.997821</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.016987</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.119471</td>\n",
              "      <td>19.0</td>\n",
              "      <td>1.289039</td>\n",
              "      <td>57.0</td>\n",
              "      <td>1.673767</td>\n",
              "      <td>142.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-04-28 00:00:00-04:00</th>\n",
              "      <td>473.029999</td>\n",
              "      <td>474.809998</td>\n",
              "      <td>466.029999</td>\n",
              "      <td>472.410004</td>\n",
              "      <td>33550800</td>\n",
              "      <td>475.529999</td>\n",
              "      <td>1</td>\n",
              "      <td>0.999841</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.021931</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.022574</td>\n",
              "      <td>16.0</td>\n",
              "      <td>0.949845</td>\n",
              "      <td>45.0</td>\n",
              "      <td>0.975988</td>\n",
              "      <td>145.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-04-29 00:00:00-04:00</th>\n",
              "      <td>470.170013</td>\n",
              "      <td>476.420013</td>\n",
              "      <td>469.589996</td>\n",
              "      <td>475.529999</td>\n",
              "      <td>30613100</td>\n",
              "      <td>475.470001</td>\n",
              "      <td>0</td>\n",
              "      <td>1.003291</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.015044</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.029812</td>\n",
              "      <td>16.0</td>\n",
              "      <td>0.957422</td>\n",
              "      <td>45.0</td>\n",
              "      <td>0.982065</td>\n",
              "      <td>145.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-04-30 00:00:00-04:00</th>\n",
              "      <td>467.130005</td>\n",
              "      <td>477.200012</td>\n",
              "      <td>462.429993</td>\n",
              "      <td>475.470001</td>\n",
              "      <td>46810600</td>\n",
              "      <td>481.679993</td>\n",
              "      <td>1</td>\n",
              "      <td>0.999937</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.005937</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.029560</td>\n",
              "      <td>16.0</td>\n",
              "      <td>0.958560</td>\n",
              "      <td>45.0</td>\n",
              "      <td>0.981508</td>\n",
              "      <td>145.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-05-01 00:00:00-04:00</th>\n",
              "      <td>483.410004</td>\n",
              "      <td>487.179993</td>\n",
              "      <td>480.739990</td>\n",
              "      <td>481.679993</td>\n",
              "      <td>43316500</td>\n",
              "      <td>488.829987</td>\n",
              "      <td>1</td>\n",
              "      <td>1.006488</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.012933</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.042894</td>\n",
              "      <td>16.0</td>\n",
              "      <td>0.971802</td>\n",
              "      <td>46.0</td>\n",
              "      <td>0.993812</td>\n",
              "      <td>146.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-05-02 00:00:00-04:00</th>\n",
              "      <td>486.540009</td>\n",
              "      <td>490.910004</td>\n",
              "      <td>484.829987</td>\n",
              "      <td>488.829987</td>\n",
              "      <td>39155400</td>\n",
              "      <td>485.929993</td>\n",
              "      <td>0</td>\n",
              "      <td>1.007367</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.020982</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.057589</td>\n",
              "      <td>17.0</td>\n",
              "      <td>0.986752</td>\n",
              "      <td>47.0</td>\n",
              "      <td>1.008028</td>\n",
              "      <td>146.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>6329 rows × 17 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2046b300-15e6-4043-b8d3-3930caf9ee20')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2046b300-15e6-4043-b8d3-3930caf9ee20 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2046b300-15e6-4043-b8d3-3930caf9ee20');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-39a6cc5a-98f3-480c-8207-82fe2a4802e3\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-39a6cc5a-98f3-480c-8207-82fe2a4802e3')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-39a6cc5a-98f3-480c-8207-82fe2a4802e3 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_203c3abb-2b4b-4362-8881-2187f65b88ef\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('QQQ')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_203c3abb-2b4b-4362-8881-2187f65b88ef button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('QQQ');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "QQQ",
              "summary": "{\n  \"name\": \"QQQ\",\n  \"rows\": 6329,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2000-03-06 00:00:00-05:00\",\n        \"max\": \"2025-05-02 00:00:00-04:00\",\n        \"num_unique_values\": 6329,\n        \"samples\": [\n          \"2004-05-20 00:00:00-04:00\",\n          \"2023-06-30 00:00:00-04:00\",\n          \"2016-09-06 00:00:00-04:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 128.0809683220928,\n        \"min\": 16.90203529898171,\n        \"max\": 538.9262828029723,\n        \"num_unique_values\": 6326,\n        \"samples\": [\n          32.03515535614549,\n          22.527480133708455,\n          69.00606223746428\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"High\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 129.00347893753099,\n        \"min\": 17.40214578736472,\n        \"max\": 540.0047320561414,\n        \"num_unique_values\": 6323,\n        \"samples\": [\n          103.27115938123855,\n          375.01681857678574,\n          22.860968253143607\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 127.05529690497552,\n        \"min\": 16.749453462932014,\n        \"max\": 535.6612335791547,\n        \"num_unique_values\": 6325,\n        \"samples\": [\n          31.70126264698009,\n          23.367597928025795,\n          69.44926775276916\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 128.10121616932022,\n        \"min\": 17.003751754760742,\n        \"max\": 538.7166748046875,\n        \"num_unique_values\": 5946,\n        \"samples\": [\n          42.06565856933594,\n          96.54379272460938,\n          34.36246109008789\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 48611682,\n        \"min\": 5212000,\n        \"max\": 616772300,\n        \"num_unique_values\": 6317,\n        \"samples\": [\n          15696600,\n          19120900,\n          88726100\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Tomorrow\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 128.17990202472976,\n        \"min\": 17.003751754760742,\n        \"max\": 538.7166748046875,\n        \"num_unique_values\": 5946,\n        \"samples\": [\n          40.65999221801758,\n          98.74663543701172,\n          34.39686584472656\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close_Ratio_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.008422531377483965,\n        \"min\": 0.9362902717714154,\n        \"max\": 1.077670020934837,\n        \"num_unique_values\": 6290,\n        \"samples\": [\n          1.0052644461385698,\n          1.0005264942695038\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Trend_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7008678270799297,\n        \"min\": 0.0,\n        \"max\": 2.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close_Ratio_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.017401980948011292,\n        \"min\": 0.8769772209028064,\n        \"max\": 1.1070365438822085,\n        \"num_unique_values\": 6329,\n        \"samples\": [\n          1.0046706749378111,\n          1.0152917844839549\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Trend_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1086311042370236,\n        \"min\": 0.0,\n        \"max\": 5.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          4.0,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close_Ratio_30\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.045529581045610584,\n        \"min\": 0.7528388075521548,\n        \"max\": 1.1755755688573533,\n        \"num_unique_values\": 6329,\n        \"samples\": [\n          0.9750803010364579,\n          1.0425841279462633\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Trend_30\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.8870058335950612,\n        \"min\": 8.0,\n        \"max\": 24.0,\n        \"num_unique_values\": 17,\n        \"samples\": [\n          19.0,\n          20.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close_Ratio_90\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07954671534858604,\n        \"min\": 0.6046120081308958,\n        \"max\": 1.3026676407363738,\n        \"num_unique_values\": 6329,\n        \"samples\": [\n          0.9595915925436704,\n          1.1360457067307292\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Trend_90\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.590806848224072,\n        \"min\": 32.0,\n        \"max\": 63.0,\n        \"num_unique_values\": 32,\n        \"samples\": [\n          32.0,\n          42.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close_Ratio_250\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.14625070611100133,\n        \"min\": 0.4405935688132001,\n        \"max\": 1.6872483347105036,\n        \"num_unique_values\": 6329,\n        \"samples\": [\n          1.0137218073334804,\n          1.2259970465649697\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Trend_250\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.012832935257856,\n        \"min\": 109.0,\n        \"max\": 161.0,\n        \"num_unique_values\": 53,\n        \"samples\": [\n          126.0,\n          152.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**------self note------**\n",
        "\n",
        "Need to add adittional code to fit on hirizons, and see if short horizon is better than long ones.\n",
        "\n",
        "**------end note------**"
      ],
      "metadata": {
        "id": "kvi_LEzo5dms"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Increase No. Decision Trees and decrease No. samples/node"
      ],
      "metadata": {
        "id": "wCHBFcZl2jLH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Revise parameters rf:\n",
        "# increase n_estimators from 100 to 200\n",
        "# decrease min_samples_split from 100 to 50\n",
        "# random_state kept at 1\n",
        "model = RandomForestClassifier(n_estimators=200, min_samples_split=50, random_state=1)\n",
        "\n",
        "# Revised the training code, and set a higher probability threshhold (60%) to Buy/1.\n",
        "def predict(train, test, predictors, model):\n",
        "    model.fit(train[predictors], train[\"Target\"])\n",
        "    preds = model.predict_proba(test[predictors]) [:,1] # Calculate the probabilities of \"Tomorrow\" as 1/Up or 0/Dn\n",
        "    preds[preds>=.6] = 1 # Tighten threshhold of up-predictions at probability of 60%, making \"Target\"=1 more precise.\n",
        "    preds[preds<.6] = 0 # Or else, predict \"Target\"=0\n",
        "    preds = pd.Series(preds, index=test.index, name=\"Predictions\")\n",
        "    combined = pd.concat([test[\"Target\"], preds], axis=1)\n",
        "    return combined"
      ],
      "metadata": {
        "id": "86o_1cNlIIgC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "predictions = backtest(QQQ, model, new_predictors)"
      ],
      "metadata": {
        "id": "X89QpEe0Klj8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "predictions[\"Predictions\"].value_counts()"
      ],
      "metadata": {
        "id": "F8MsbYMgLGzD",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        },
        "outputId": "d5ed62a1-8c5e-48fb-ab00-5ca0d3f61cc4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Predictions\n",
              "0.0    4567\n",
              "1.0     762\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Predictions</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0.0</th>\n",
              "      <td>4567</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1.0</th>\n",
              "      <td>762</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "precision = precision_score(predictions[\"Target\"], predictions[\"Predictions\"]) # TP / (TP + FP)\n",
        "print(f\"Precision: {precision}\")\n",
        "\n",
        "accuracy = accuracy_score(predictions[\"Target\"], predictions[\"Predictions\"]) # (TP + TN) / ALL\n",
        "print(f\"Accuracty: {accuracy}\")\n",
        "\n",
        "recall = recall_score(predictions[\"Target\"], predictions[\"Predictions\"]) # TP / (TP + FN)\n",
        "print(f\"Recall: {recall}\")\n",
        "\n",
        "f1 = f1_score(predictions[\"Target\"], predictions[\"Predictions\"]) # 2TP / (2TP + TN + FP) = 2*P*R / (P + R)\n",
        "print(f\"F1 Score: {f1}\")\n",
        "\n",
        "specificity = recall_score(predictions[\"Target\"], predictions[\"Predictions\"], pos_label=0) # TN / (TN + FP)\n",
        "print(f\"Specificity: {specificity}\")\n",
        "\n",
        "# from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n",
        "# import matplotlib.pyplot as plt\n",
        "\n",
        "cm_bktst = confusion_matrix(predictions[\"Target\"], predictions[\"Predictions\"])\n",
        "\n",
        "# Define class labels (optional)\n",
        "class_labels = ['Negative', 'Positive']\n",
        "\n",
        "# Create the ConfusionMatrixDisplay object\n",
        "disp = ConfusionMatrixDisplay(confusion_matrix=cm_bktst, display_labels=class_labels)\n",
        "\n",
        "# Plot the confusion matrix\n",
        "disp.plot(cmap=plt.cm.Blues)\n",
        "plt.title('Confusion Matrix')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "Rqn1o7M_Lj9C",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 559
        },
        "outputId": "97d7579b-d2ae-40ba-e1bf-90fec8d15662"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Precision: 0.5341207349081365\n",
            "Accuracty: 0.45824732595233625\n",
            "Recall: 0.13848247703300443\n",
            "F1 Score: 0.2199405566063226\n",
            "Specificity: 0.8514644351464435\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Understand the result 200-trees 50-samples/node**:\n",
        "\n",
        "**Precision**: 53%. Buying on the preds \"1\" makes profits 53 times vs loss 47 times, with 6% chance margin.\n",
        "\n",
        "**Recall**: 14%. Buying on the preds \"1\" misses only 86% of the buying opportunities.\n",
        "\n",
        "**Accuracy**: 46%. Buying on the preds \"1\" and Selling on the preds \"0\" together makes profits 46 times vs loss 54 times, with -6% chance margin.\n",
        "\n",
        "**F1**: 22%. Real bad balance between precision and recall sensitivity.\n",
        "\n",
        "**nPrecision**: 45%. Selling on the preds \"0\" makes profits 45 times vs loss 55 times, with -10% chance margin. Don't sell on prediction!"
      ],
      "metadata": {
        "id": "YW2xuxTg4CtW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Summary in This Model:\n",
        "\n",
        "* 1) Downloaded some stock data from *yfinance*, cleaned and visualized the data;\n",
        "* 2) Set up machine learning target, trained our initial model\n",
        "* 3) Evaluated error, created a way to backtest accurately\n",
        "measuring that error over long periods of time ;\n",
        "* 4) Improved model with extra predictor columns.\n",
        "\n",
        "# Next Steps to Improve This Model\n",
        "\n",
        "* 1) **Foreign Exchanges**: There are other indices\n",
        "around the world that open before the u.s markets open so it might be worth looking at those prices and seeing if they actually correlate. If an index on the other side of the\n",
        "world is increasing does that help predict the US market bet;\n",
        "* 2) **News Headlines**: News, includeing articles that are general macroeconomic conditions like interest rates, inflation, etc., can also add in some key predictor components of the market like key stocks and key sectors.For example, if tech is in a downturn, it's possible that six months later the S&P 500 will go down.\n",
        "* 3) **Intra-Day Horizons**: Try looking at hourly, minute data even if it's not always the easiest or cheapest to get. But if you\n",
        "can get that data, you can make more accurate predictions."
      ],
      "metadata": {
        "id": "UYaGZ32NMt5y"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Post Project Notes\n",
        "\n",
        "QQQ data saved in Github repository folder: `http://github.com/fengfrankgthb/BUS-41204/QQQ`. In the future, replace the old data source from yfinance:\n",
        "\n",
        "    QQQ = yf.Ticker(\"QQQ\")\n",
        "    QQQ = QQQ.history(period=\"max\")\n",
        "\n",
        "with either of the codes below to avoid data limit from `yfinance`\n",
        "\n",
        "* 1) `/raw/` URL from the web server of Github. This is more intuitively rememberable, but less stable and more slowly served. Sometimes when Github changes its website, this URL may be inadvertently affected.\n",
        "\n",
        "    url = \"https://github.com/fengfrankgthb/BUS-41204/raw/main/QQQ/QQQ_history_990310_250505.csv\"\n",
        "    df = pd.read_csv(url)\n",
        "\n",
        "* 2) `raw.githubusercontent.com` domain is specifically built to serve raw data requests. It is globally maintained with local cache to serve request faster.\n",
        "\n",
        "    url = \"https://raw.githubusercontent.com/fengfrankgthb/BUS-41204/main/QQQ/QQQ_history_990310_250505.csv\"\n",
        "    df = pd.read_csv(url)\n",
        "\n",
        "\n",
        "### Below are test loads using either one of the urls:"
      ],
      "metadata": {
        "id": "udu2sQix7UFw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Read the CSV file directly from the /raw/ URL\n",
        "import pandas as pd\n",
        "url = \"https://github.com/fengfrankgthb/BUS-41204/raw/main/QQQ/QQQ_history_990310_250505.csv\"\n",
        "df = pd.read_csv(url)\n",
        "df[-5:-2] # Display 5th-3rd last rows of data. Index=-5 is 5th last row included, whereas index=-2 is 2nd last row excluded.\n",
        "# There is no index=-0. The last row index=-1, whereas the 1st row index=0."
      ],
      "metadata": {
        "id": "q5VQqxhf7Izy",
        "outputId": "b3d2de59-58f6-48d9-a2c5-f7f123cc69a9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        }
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                           Date        Open        High         Low  \\\n",
              "6575  2025-04-29 00:00:00-04:00  470.170013  476.420013  469.589996   \n",
              "6576  2025-04-30 00:00:00-04:00  467.130005  477.200012  462.429993   \n",
              "6577  2025-05-01 00:00:00-04:00  483.410004  487.179993  480.739990   \n",
              "\n",
              "           Close    Volume  Dividends  Stock Splits  Capital Gains  \n",
              "6575  475.529999  30613100        0.0           0.0            0.0  \n",
              "6576  475.470001  46810600        0.0           0.0            0.0  \n",
              "6577  481.679993  43316500        0.0           0.0            0.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-53a7d186-3568-43d6-a8ac-0f292fa27249\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Volume</th>\n",
              "      <th>Dividends</th>\n",
              "      <th>Stock Splits</th>\n",
              "      <th>Capital Gains</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>6575</th>\n",
              "      <td>2025-04-29 00:00:00-04:00</td>\n",
              "      <td>470.170013</td>\n",
              "      <td>476.420013</td>\n",
              "      <td>469.589996</td>\n",
              "      <td>475.529999</td>\n",
              "      <td>30613100</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6576</th>\n",
              "      <td>2025-04-30 00:00:00-04:00</td>\n",
              "      <td>467.130005</td>\n",
              "      <td>477.200012</td>\n",
              "      <td>462.429993</td>\n",
              "      <td>475.470001</td>\n",
              "      <td>46810600</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6577</th>\n",
              "      <td>2025-05-01 00:00:00-04:00</td>\n",
              "      <td>483.410004</td>\n",
              "      <td>487.179993</td>\n",
              "      <td>480.739990</td>\n",
              "      <td>481.679993</td>\n",
              "      <td>43316500</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-53a7d186-3568-43d6-a8ac-0f292fa27249')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-53a7d186-3568-43d6-a8ac-0f292fa27249 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-53a7d186-3568-43d6-a8ac-0f292fa27249');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-bbf5e45b-b629-4a1d-aa2c-81ccb38dacff\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bbf5e45b-b629-4a1d-aa2c-81ccb38dacff')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-bbf5e45b-b629-4a1d-aa2c-81ccb38dacff button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Read the CSV file directly from the /raw.githubusercontent.com/ URL\n",
        "import pandas as pd\n",
        "url = \"https://raw.githubusercontent.com/fengfrankgthb/BUS-41204/main/QQQ/QQQ_history_990310_250505.csv\"\n",
        "df = pd.read_csv(url)\n",
        "df[2:5] # Display 3rd-5th rows of data. Index=2 is 3rd row included, whereas index=5 is 6th row excluded."
      ],
      "metadata": {
        "id": "EI7lWHm9VM7L",
        "outputId": "1a2d1077-7d20-45c7-b28c-2d33fb48b241",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        }
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                        Date       Open       High        Low      Close  \\\n",
              "2  1999-03-12 00:00:00-05:00  43.335818  43.362307  42.090840  42.435196   \n",
              "3  1999-03-15 00:00:00-05:00  42.753072  43.706672  42.302761  43.653694   \n",
              "4  1999-03-16 00:00:00-05:00  43.839095  44.209939  43.362295  44.024517   \n",
              "\n",
              "    Volume  Dividends  Stock Splits  Capital Gains  \n",
              "2  8743600        0.0           0.0            0.0  \n",
              "3  6369000        0.0           0.0            0.0  \n",
              "4  4905800        0.0           0.0            0.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5aa316ff-f1f8-4368-b255-49a7928318d9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Volume</th>\n",
              "      <th>Dividends</th>\n",
              "      <th>Stock Splits</th>\n",
              "      <th>Capital Gains</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1999-03-12 00:00:00-05:00</td>\n",
              "      <td>43.335818</td>\n",
              "      <td>43.362307</td>\n",
              "      <td>42.090840</td>\n",
              "      <td>42.435196</td>\n",
              "      <td>8743600</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1999-03-15 00:00:00-05:00</td>\n",
              "      <td>42.753072</td>\n",
              "      <td>43.706672</td>\n",
              "      <td>42.302761</td>\n",
              "      <td>43.653694</td>\n",
              "      <td>6369000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1999-03-16 00:00:00-05:00</td>\n",
              "      <td>43.839095</td>\n",
              "      <td>44.209939</td>\n",
              "      <td>43.362295</td>\n",
              "      <td>44.024517</td>\n",
              "      <td>4905800</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5aa316ff-f1f8-4368-b255-49a7928318d9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5aa316ff-f1f8-4368-b255-49a7928318d9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5aa316ff-f1f8-4368-b255-49a7928318d9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-32448b0a-35a5-4d36-9ce6-72ff511342d7\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-32448b0a-35a5-4d36-9ce6-72ff511342d7')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-32448b0a-35a5-4d36-9ce6-72ff511342d7 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    }
  ]
}
